//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Chat.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::RoomDoesNotExist> iceC_Chat_RoomDoesNotExist_init("::Chat::RoomDoesNotExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::RoomAlreadyExists> iceC_Chat_RoomAlreadyExists_init("::Chat::RoomAlreadyExists");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::FactoryAlreadyExist> iceC_Chat_FactoryAlreadyExist_init("::Chat::FactoryAlreadyExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::FactoryDoesNotExist> iceC_Chat_FactoryDoesNotExist_init("::Chat::FactoryDoesNotExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::UserDoesNotExist> iceC_Chat_UserDoesNotExist_init("::Chat::UserDoesNotExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::UserAlreadyExists> iceC_Chat_UserAlreadyExists_init("::Chat::UserAlreadyExists");

const ::std::string iceC_Chat_Server_ids[2] =
{
    "::Chat::Server",
    "::Ice::Object"
};
const ::std::string iceC_Chat_Server_ops[] =
{
    "addRoom",
    "getRoom",
    "getRooms",
    "getUser",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "logIn",
    "logOut",
    "removeRoom"
};
const ::std::string iceC_Chat_Server_logIn_name = "logIn";
const ::std::string iceC_Chat_Server_logOut_name = "logOut";
const ::std::string iceC_Chat_Server_getUser_name = "getUser";
const ::std::string iceC_Chat_Server_getRoom_name = "getRoom";
const ::std::string iceC_Chat_Server_getRooms_name = "getRooms";
const ::std::string iceC_Chat_Server_addRoom_name = "addRoom";
const ::std::string iceC_Chat_Server_removeRoom_name = "removeRoom";

const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};
const ::std::string iceC_Chat_User_ops[] =
{
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "receiveMessage",
    "receivePrivateMessage"
};
const ::std::string iceC_Chat_User_getName_name = "getName";
const ::std::string iceC_Chat_User_receiveMessage_name = "receiveMessage";
const ::std::string iceC_Chat_User_receivePrivateMessage_name = "receivePrivateMessage";

const ::std::string iceC_Chat_Room_ids[2] =
{
    "::Chat::Room",
    "::Ice::Object"
};
const ::std::string iceC_Chat_Room_ops[] =
{
    "addUser",
    "getName",
    "getOwnerName",
    "getUser",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "presentUsers",
    "removeUser",
    "sendMessage"
};
const ::std::string iceC_Chat_Room_presentUsers_name = "presentUsers";
const ::std::string iceC_Chat_Room_getUser_name = "getUser";
const ::std::string iceC_Chat_Room_sendMessage_name = "sendMessage";
const ::std::string iceC_Chat_Room_addUser_name = "addUser";
const ::std::string iceC_Chat_Room_removeUser_name = "removeUser";
const ::std::string iceC_Chat_Room_getName_name = "getName";
const ::std::string iceC_Chat_Room_getOwnerName_name = "getOwnerName";

}

Chat::RoomDoesNotExist::~RoomDoesNotExist()
{
}

const ::std::string&
Chat::RoomDoesNotExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::RoomDoesNotExist";
    return typeId;
}

Chat::RoomAlreadyExists::~RoomAlreadyExists()
{
}

const ::std::string&
Chat::RoomAlreadyExists::ice_staticId()
{
    static const ::std::string typeId = "::Chat::RoomAlreadyExists";
    return typeId;
}

Chat::FactoryAlreadyExist::~FactoryAlreadyExist()
{
}

const ::std::string&
Chat::FactoryAlreadyExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::FactoryAlreadyExist";
    return typeId;
}

Chat::FactoryDoesNotExist::~FactoryDoesNotExist()
{
}

const ::std::string&
Chat::FactoryDoesNotExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::FactoryDoesNotExist";
    return typeId;
}

Chat::UserDoesNotExist::~UserDoesNotExist()
{
}

const ::std::string&
Chat::UserDoesNotExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::UserDoesNotExist";
    return typeId;
}

Chat::UserAlreadyExists::~UserAlreadyExists()
{
}

const ::std::string&
Chat::UserAlreadyExists::ice_staticId()
{
    static const ::std::string typeId = "::Chat::UserAlreadyExists";
    return typeId;
}

bool
Chat::Server::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Server_ids, iceC_Chat_Server_ids + 2, s);
}

::std::vector<::std::string>
Chat::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_Server_ids[0], &iceC_Chat_Server_ids[2]);
}

::std::string
Chat::Server::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Server::ice_staticId()
{
    static const ::std::string typeId = "::Chat::Server";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::Server::_iceD_logIn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_who;
    istr->readAll(iceP_who);
    inS.endReadParams();
    this->logIn(::std::move(iceP_who), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_logOut(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_who;
    istr->readAll(iceP_who);
    inS.endReadParams();
    this->logOut(::std::move(iceP_who), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_getUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<UserPrx> ret = this->getUser(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_getRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<RoomPrx> ret = this->getRoom(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    roomList ret = this->getRooms(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_addRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::std::shared_ptr<UserPrx> iceP_owner;
    istr->readAll(iceP_name, iceP_owner);
    inS.endReadParams();
    ::std::shared_ptr<RoomPrx> ret = this->addRoom(::std::move(iceP_name), ::std::move(iceP_owner), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_removeRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::std::shared_ptr<UserPrx> iceP_owner;
    istr->readAll(iceP_name, iceP_owner);
    inS.endReadParams();
    this->removeRoom(::std::move(iceP_name), ::std::move(iceP_owner), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Server_ops, iceC_Chat_Server_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Server_ops)
    {
        case 0:
        {
            return _iceD_addRoom(in, current);
        }
        case 1:
        {
            return _iceD_getRoom(in, current);
        }
        case 2:
        {
            return _iceD_getRooms(in, current);
        }
        case 3:
        {
            return _iceD_getUser(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_logIn(in, current);
        }
        case 9:
        {
            return _iceD_logOut(in, current);
        }
        case 10:
        {
            return _iceD_removeRoom(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::User::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector<::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

::std::string
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
    static const ::std::string typeId = "::Chat::User";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receiveMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::shared_ptr<UserPrx> iceP_sender;
    ::std::string iceP_roomName;
    istr->readAll(iceP_message, iceP_sender, iceP_roomName);
    inS.endReadParams();
    this->receiveMessage(::std::move(iceP_message), ::std::move(iceP_sender), ::std::move(iceP_roomName), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receivePrivateMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::shared_ptr<UserPrx> iceP_sender;
    istr->readAll(iceP_message, iceP_sender);
    inS.endReadParams();
    this->receivePrivateMessage(::std::move(iceP_message), ::std::move(iceP_sender), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_ops, iceC_Chat_User_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_ops)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_receiveMessage(in, current);
        }
        case 6:
        {
            return _iceD_receivePrivateMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::Room::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Room_ids, iceC_Chat_Room_ids + 2, s);
}

::std::vector<::std::string>
Chat::Room::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_Room_ids[0], &iceC_Chat_Room_ids[2]);
}

::std::string
Chat::Room::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Room::ice_staticId()
{
    static const ::std::string typeId = "::Chat::Room";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::Room::_iceD_presentUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    userList ret = this->presentUsers(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<UserPrx> ret = this->getUser(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_sendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::shared_ptr<UserPrx> iceP_sender;
    istr->readAll(iceP_message, iceP_sender);
    inS.endReadParams();
    this->sendMessage(::std::move(iceP_message), ::std::move(iceP_sender), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_addUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_who;
    istr->readAll(iceP_who);
    inS.endReadParams();
    this->addUser(::std::move(iceP_who), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_removeUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_who;
    istr->readAll(iceP_who);
    inS.endReadParams();
    this->removeUser(::std::move(iceP_who), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getOwnerName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getOwnerName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Room_ops, iceC_Chat_Room_ops + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Room_ops)
    {
        case 0:
        {
            return _iceD_addUser(in, current);
        }
        case 1:
        {
            return _iceD_getName(in, current);
        }
        case 2:
        {
            return _iceD_getOwnerName(in, current);
        }
        case 3:
        {
            return _iceD_getUser(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_presentUsers(in, current);
        }
        case 9:
        {
            return _iceD_removeUser(in, current);
        }
        case 10:
        {
            return _iceD_sendMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_logIn(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_who, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_logIn_name);
    outAsync->invoke(iceC_Chat_Server_logIn_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_logOut(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_who, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_logOut_name);
    outAsync->invoke(iceC_Chat_Server_logOut_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_getUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::UserPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_getUser_name);
    outAsync->invoke(iceC_Chat_Server_getUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_getRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_getRoom_name);
    outAsync->invoke(iceC_Chat_Server_getRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const RoomDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_getRooms(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::roomList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_getRooms_name);
    outAsync->invoke(iceC_Chat_Server_getRooms_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_addRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::RoomPrx>>>& outAsync, const ::std::string& iceP_name, const ::std::shared_ptr<UserPrx>& iceP_owner, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_addRoom_name);
    outAsync->invoke(iceC_Chat_Server_addRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_owner);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const RoomAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::ServerPrx::_iceI_removeRoom(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::std::shared_ptr<UserPrx>& iceP_owner, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Server_removeRoom_name);
    outAsync->invoke(iceC_Chat_Server_removeRoom_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_owner);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const RoomDoesNotExist&)
            {
                throw;
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::ServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ServerPrx>();
}
/// \endcond

const ::std::string&
Chat::ServerPrx::ice_staticId()
{
    return Server::ice_staticId();
}

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name);
    outAsync->invoke(iceC_Chat_User_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_receiveMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::std::shared_ptr<UserPrx>& iceP_sender, const ::std::string& iceP_roomName, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_receiveMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_sender, iceP_roomName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_receivePrivateMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::std::shared_ptr<UserPrx>& iceP_sender, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_receivePrivateMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_sender);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::UserPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UserPrx>();
}
/// \endcond

const ::std::string&
Chat::UserPrx::ice_staticId()
{
    return User::ice_staticId();
}

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_presentUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::Chat::userList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_presentUsers_name);
    outAsync->invoke(iceC_Chat_Room_presentUsers_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_getUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::Chat::UserPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_getUser_name);
    outAsync->invoke(iceC_Chat_Room_getUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::std::shared_ptr<UserPrx>& iceP_sender, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_sendMessage_name);
    outAsync->invoke(iceC_Chat_Room_sendMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_sender);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_addUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_who, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_addUser_name);
    outAsync->invoke(iceC_Chat_Room_addUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_removeUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_who, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_removeUser_name);
    outAsync->invoke(iceC_Chat_Room_removeUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_who);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_getName_name);
    outAsync->invoke(iceC_Chat_Room_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::RoomPrx::_iceI_getOwnerName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_Room_getOwnerName_name);
    outAsync->invoke(iceC_Chat_Room_getOwnerName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::RoomPrx::_newInstance() const
{
    return ::IceInternal::createProxy<RoomPrx>();
}
/// \endcond

const ::std::string&
Chat::RoomPrx::ice_staticId()
{
    return Room::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Chat_Server_logIn_name = "logIn";

const ::std::string iceC_Chat_Server_logOut_name = "logOut";

const ::std::string iceC_Chat_Server_getUser_name = "getUser";

const ::std::string iceC_Chat_Server_getRoom_name = "getRoom";

const ::std::string iceC_Chat_Server_getRooms_name = "getRooms";

const ::std::string iceC_Chat_Server_addRoom_name = "addRoom";

const ::std::string iceC_Chat_Server_removeRoom_name = "removeRoom";

const ::std::string iceC_Chat_User_getName_name = "getName";

const ::std::string iceC_Chat_User_receiveMessage_name = "receiveMessage";

const ::std::string iceC_Chat_User_receivePrivateMessage_name = "receivePrivateMessage";

const ::std::string iceC_Chat_Room_presentUsers_name = "presentUsers";

const ::std::string iceC_Chat_Room_getUser_name = "getUser";

const ::std::string iceC_Chat_Room_sendMessage_name = "sendMessage";

const ::std::string iceC_Chat_Room_addUser_name = "addUser";

const ::std::string iceC_Chat_Room_removeUser_name = "removeUser";

const ::std::string iceC_Chat_Room_getName_name = "getName";

const ::std::string iceC_Chat_Room_getOwnerName_name = "getOwnerName";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::RoomDoesNotExist> iceC_Chat_RoomDoesNotExist_init("::Chat::RoomDoesNotExist");

}

#ifdef ICE_CPP11_COMPILER
Chat::RoomDoesNotExist::~RoomDoesNotExist()
{
}
#else
Chat::RoomDoesNotExist::~RoomDoesNotExist() throw()
{
}
#endif

::std::string
Chat::RoomDoesNotExist::ice_id() const
{
    return "::Chat::RoomDoesNotExist";
}

Chat::RoomDoesNotExist*
Chat::RoomDoesNotExist::ice_clone() const
{
    return new RoomDoesNotExist(*this);
}

void
Chat::RoomDoesNotExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::RoomDoesNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::RoomDoesNotExist", -1, true);
    ::Ice::StreamWriter< RoomDoesNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::RoomDoesNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RoomDoesNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::RoomAlreadyExists> iceC_Chat_RoomAlreadyExists_init("::Chat::RoomAlreadyExists");

}

#ifdef ICE_CPP11_COMPILER
Chat::RoomAlreadyExists::~RoomAlreadyExists()
{
}
#else
Chat::RoomAlreadyExists::~RoomAlreadyExists() throw()
{
}
#endif

::std::string
Chat::RoomAlreadyExists::ice_id() const
{
    return "::Chat::RoomAlreadyExists";
}

Chat::RoomAlreadyExists*
Chat::RoomAlreadyExists::ice_clone() const
{
    return new RoomAlreadyExists(*this);
}

void
Chat::RoomAlreadyExists::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::RoomAlreadyExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::RoomAlreadyExists", -1, true);
    ::Ice::StreamWriter< RoomAlreadyExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::RoomAlreadyExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< RoomAlreadyExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::FactoryAlreadyExist> iceC_Chat_FactoryAlreadyExist_init("::Chat::FactoryAlreadyExist");

}

#ifdef ICE_CPP11_COMPILER
Chat::FactoryAlreadyExist::~FactoryAlreadyExist()
{
}
#else
Chat::FactoryAlreadyExist::~FactoryAlreadyExist() throw()
{
}
#endif

::std::string
Chat::FactoryAlreadyExist::ice_id() const
{
    return "::Chat::FactoryAlreadyExist";
}

Chat::FactoryAlreadyExist*
Chat::FactoryAlreadyExist::ice_clone() const
{
    return new FactoryAlreadyExist(*this);
}

void
Chat::FactoryAlreadyExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::FactoryAlreadyExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::FactoryAlreadyExist", -1, true);
    ::Ice::StreamWriter< FactoryAlreadyExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::FactoryAlreadyExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< FactoryAlreadyExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::FactoryDoesNotExist> iceC_Chat_FactoryDoesNotExist_init("::Chat::FactoryDoesNotExist");

}

#ifdef ICE_CPP11_COMPILER
Chat::FactoryDoesNotExist::~FactoryDoesNotExist()
{
}
#else
Chat::FactoryDoesNotExist::~FactoryDoesNotExist() throw()
{
}
#endif

::std::string
Chat::FactoryDoesNotExist::ice_id() const
{
    return "::Chat::FactoryDoesNotExist";
}

Chat::FactoryDoesNotExist*
Chat::FactoryDoesNotExist::ice_clone() const
{
    return new FactoryDoesNotExist(*this);
}

void
Chat::FactoryDoesNotExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::FactoryDoesNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::FactoryDoesNotExist", -1, true);
    ::Ice::StreamWriter< FactoryDoesNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::FactoryDoesNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< FactoryDoesNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserDoesNotExist> iceC_Chat_UserDoesNotExist_init("::Chat::UserDoesNotExist");

}

#ifdef ICE_CPP11_COMPILER
Chat::UserDoesNotExist::~UserDoesNotExist()
{
}
#else
Chat::UserDoesNotExist::~UserDoesNotExist() throw()
{
}
#endif

::std::string
Chat::UserDoesNotExist::ice_id() const
{
    return "::Chat::UserDoesNotExist";
}

Chat::UserDoesNotExist*
Chat::UserDoesNotExist::ice_clone() const
{
    return new UserDoesNotExist(*this);
}

void
Chat::UserDoesNotExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::UserDoesNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::UserDoesNotExist", -1, true);
    ::Ice::StreamWriter< UserDoesNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::UserDoesNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UserDoesNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserAlreadyExists> iceC_Chat_UserAlreadyExists_init("::Chat::UserAlreadyExists");

}

#ifdef ICE_CPP11_COMPILER
Chat::UserAlreadyExists::~UserAlreadyExists()
{
}
#else
Chat::UserAlreadyExists::~UserAlreadyExists() throw()
{
}
#endif

::std::string
Chat::UserAlreadyExists::ice_id() const
{
    return "::Chat::UserAlreadyExists";
}

Chat::UserAlreadyExists*
Chat::UserAlreadyExists::ice_clone() const
{
    return new UserAlreadyExists(*this);
}

void
Chat::UserAlreadyExists::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::UserAlreadyExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::UserAlreadyExists", -1, true);
    ::Ice::StreamWriter< UserAlreadyExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::UserAlreadyExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UserAlreadyExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(Server* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Server>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Server;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_logIn(const ::Chat::UserPrx& iceP_who, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_logIn_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_logIn_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_logIn_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_logIn_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Server::end_logIn(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_logIn_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_logOut(const ::Chat::UserPrx& iceP_who, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_logOut_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_logOut_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_logOut_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_logOut_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Server::end_logOut(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_logOut_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_getUser(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_getUser_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_getUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_getUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_getUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::UserPrx
IceProxy::Chat::Server::end_getUser(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_getUser_name);
    ::Chat::UserPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_getRoom(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_getRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_getRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_getRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_getRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomPrx
IceProxy::Chat::Server::end_getRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_getRoom_name);
    ::Chat::RoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::RoomDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_getRooms(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_getRooms_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_getRooms_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_getRooms_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Server_getRooms_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::roomList
IceProxy::Chat::Server::end_getRooms(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_getRooms_name);
    ::Chat::roomList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_addRoom(const ::std::string& iceP_name, const ::Chat::UserPrx& iceP_owner, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_addRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_addRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_addRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        ostr->write(iceP_owner);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_addRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::RoomPrx
IceProxy::Chat::Server::end_addRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_addRoom_name);
    ::Chat::RoomPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::RoomAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::_iceI_begin_removeRoom(const ::std::string& iceP_name, const ::Chat::UserPrx& iceP_owner, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Server_removeRoom_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Server_removeRoom_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Server_removeRoom_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        ostr->write(iceP_owner);
        result->endWriteParams();
        result->invoke(iceC_Chat_Server_removeRoom_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Server::end_removeRoom(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Server_removeRoom_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::RoomDoesNotExist&)
        {
            throw;
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::Server::_newInstance() const
{
    return new Server;
}
/// \endcond

const ::std::string&
IceProxy::Chat::Server::ice_staticId()
{
    return ::Chat::Server::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(User* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< User>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new User;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_User_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::User::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_User_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_receiveMessage(const ::std::string& iceP_message, const ::Chat::UserPrx& iceP_sender, const ::std::string& iceP_roomName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_receiveMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_receiveMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        ostr->write(iceP_sender);
        ostr->write(iceP_roomName);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_receiveMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_receiveMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_receiveMessage_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_receivePrivateMessage(const ::std::string& iceP_message, const ::Chat::UserPrx& iceP_sender, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_receivePrivateMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_receivePrivateMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        ostr->write(iceP_sender);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_receivePrivateMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_receivePrivateMessage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_receivePrivateMessage_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::User::_newInstance() const
{
    return new User;
}
/// \endcond

const ::std::string&
IceProxy::Chat::User::ice_staticId()
{
    return ::Chat::User::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(Room* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Room>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Room;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_presentUsers(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_presentUsers_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_presentUsers_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_presentUsers_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Room_presentUsers_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::userList
IceProxy::Chat::Room::end_presentUsers(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_presentUsers_name);
    ::Chat::userList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_getUser(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_getUser_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_getUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_getUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_getUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::UserPrx
IceProxy::Chat::Room::end_getUser(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_getUser_name);
    ::Chat::UserPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_sendMessage(const ::std::string& iceP_message, const ::Chat::UserPrx& iceP_sender, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_sendMessage_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_sendMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_sendMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        ostr->write(iceP_sender);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_sendMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_sendMessage(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_sendMessage_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_addUser(const ::Chat::UserPrx& iceP_who, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_addUser_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_addUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_addUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_addUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_addUser(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_addUser_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_removeUser(const ::Chat::UserPrx& iceP_who, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_removeUser_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_removeUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_removeUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_who);
        result->endWriteParams();
        result->invoke(iceC_Chat_Room_removeUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::Room::end_removeUser(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_removeUser_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Room_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::Room::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::_iceI_begin_getOwnerName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_Room_getOwnerName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_Room_getOwnerName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_Room_getOwnerName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_Room_getOwnerName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::Room::end_getOwnerName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_Room_getOwnerName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::Room::_newInstance() const
{
    return new Room;
}
/// \endcond

const ::std::string&
IceProxy::Chat::Room::ice_staticId()
{
    return ::Chat::Room::ice_staticId();
}

Chat::Server::~Server()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(Server* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_Server_ids[2] =
{
    "::Chat::Server",
    "::Ice::Object"
};

}

bool
Chat::Server::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Server_ids, iceC_Chat_Server_ids + 2, s);
}

::std::vector< ::std::string>
Chat::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_Server_ids[0], &iceC_Chat_Server_ids[2]);
}

const ::std::string&
Chat::Server::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Server::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::Server";
    return typeId;
#else
    return iceC_Chat_Server_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::Server::_iceD_logIn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_who;
    istr->read(iceP_who);
    inS.endReadParams();
    this->logIn(iceP_who, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_logOut(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_who;
    istr->read(iceP_who);
    inS.endReadParams();
    this->logOut(iceP_who, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_getUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    UserPrx ret = this->getUser(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_getRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    RoomPrx ret = this->getRoom(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_getRooms(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    roomList ret = this->getRooms(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_addRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    UserPrx iceP_owner;
    istr->read(iceP_name);
    istr->read(iceP_owner);
    inS.endReadParams();
    RoomPrx ret = this->addRoom(iceP_name, iceP_owner, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Server::_iceD_removeRoom(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    UserPrx iceP_owner;
    istr->read(iceP_name);
    istr->read(iceP_owner);
    inS.endReadParams();
    this->removeRoom(iceP_name, iceP_owner, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_Server_all[] =
{
    "addRoom",
    "getRoom",
    "getRooms",
    "getUser",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "logIn",
    "logOut",
    "removeRoom"
};

}

/// \cond INTERNAL
bool
Chat::Server::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Server_all, iceC_Chat_Server_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Server_all)
    {
        case 0:
        {
            return _iceD_addRoom(in, current);
        }
        case 1:
        {
            return _iceD_getRoom(in, current);
        }
        case 2:
        {
            return _iceD_getRooms(in, current);
        }
        case 3:
        {
            return _iceD_getUser(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_logIn(in, current);
        }
        case 9:
        {
            return _iceD_logOut(in, current);
        }
        case 10:
        {
            return _iceD_removeRoom(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::Server::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Server, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::Server::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Server, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(ServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Server::ice_staticId(), v);
    }
}
/// \endcond

Chat::User::~User()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(User* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};

}

bool
Chat::User::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector< ::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

const ::std::string&
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::User";
    return typeId;
#else
    return iceC_Chat_User_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receiveMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    UserPrx iceP_sender;
    ::std::string iceP_roomName;
    istr->read(iceP_message);
    istr->read(iceP_sender);
    istr->read(iceP_roomName);
    inS.endReadParams();
    this->receiveMessage(iceP_message, iceP_sender, iceP_roomName, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receivePrivateMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    UserPrx iceP_sender;
    istr->read(iceP_message);
    istr->read(iceP_sender);
    inS.endReadParams();
    this->receivePrivateMessage(iceP_message, iceP_sender, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_User_all[] =
{
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "receiveMessage",
    "receivePrivateMessage"
};

}

/// \cond INTERNAL
bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_all, iceC_Chat_User_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_all)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_receiveMessage(in, current);
        }
        case 6:
        {
            return _iceD_receivePrivateMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::User::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< User, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::User::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< User, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(UserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = UserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(User::ice_staticId(), v);
    }
}
/// \endcond

Chat::Room::~Room()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(Room* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_Room_ids[2] =
{
    "::Chat::Room",
    "::Ice::Object"
};

}

bool
Chat::Room::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_Room_ids, iceC_Chat_Room_ids + 2, s);
}

::std::vector< ::std::string>
Chat::Room::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_Room_ids[0], &iceC_Chat_Room_ids[2]);
}

const ::std::string&
Chat::Room::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::Room::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::Room";
    return typeId;
#else
    return iceC_Chat_Room_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::Room::_iceD_presentUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    userList ret = this->presentUsers(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    UserPrx ret = this->getUser(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_sendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    UserPrx iceP_sender;
    istr->read(iceP_message);
    istr->read(iceP_sender);
    inS.endReadParams();
    this->sendMessage(iceP_message, iceP_sender, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_addUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_who;
    istr->read(iceP_who);
    inS.endReadParams();
    this->addUser(iceP_who, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_removeUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_who;
    istr->read(iceP_who);
    inS.endReadParams();
    this->removeUser(iceP_who, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::Room::_iceD_getOwnerName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getOwnerName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_Room_all[] =
{
    "addUser",
    "getName",
    "getOwnerName",
    "getUser",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "presentUsers",
    "removeUser",
    "sendMessage"
};

}

/// \cond INTERNAL
bool
Chat::Room::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_Room_all, iceC_Chat_Room_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_Room_all)
    {
        case 0:
        {
            return _iceD_addUser(in, current);
        }
        case 1:
        {
            return _iceD_getName(in, current);
        }
        case 2:
        {
            return _iceD_getOwnerName(in, current);
        }
        case 3:
        {
            return _iceD_getUser(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_presentUsers(in, current);
        }
        case 9:
        {
            return _iceD_removeUser(in, current);
        }
        case 10:
        {
            return _iceD_sendMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::Room::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Room, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::Room::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Room, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(RoomPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = RoomPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Room::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
